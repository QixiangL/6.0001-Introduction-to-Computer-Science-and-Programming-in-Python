# Lecture 4: Decomposition, Abstraction, and Functions - how to write code beautifully
   4.1 structuring programs and hiding details
      4.1.1 GOOD PROGRAMMING
	* measure good programmers by the amount of functionality
	* functions
	* mechanism to achieve decomposition and abstraction
	   # ABSTRACTION IDEA: a black box with input/output
	   # DECOMPOSITION IDEA: different branchs work together to achieve an end goal 
      4.1.2 create structure with DECOMPOSITION
	* divide code into modules
	   # self-contained (completed), organized and coherent, used to break up code
	* type<functions> and <classes>
      4.1.3 supress details with ABSTRACTION
	* type <function specifications> and <docstrings>
	   # code as a black box
   4.2 FUNCTIONS
	* reusable pieces/ chunks of code, called functions
	* run the function with "called" or "invoked" in a program
	* Basic function characteristics:
	   - keyword name (parameter or arguments) - def is_even(i)
	   - specification, docstrings - """ Input: i, a positive int
				  Returns True if i is even, otherwise False """
	   - body and return - print("inside is even"); return i % 2 == 0
      4.2.1 return <expression>
	* expression to evaluate and return - 
	   # return True, otherwise False
	* Python returns the value None, if no return given
      4.3.2 return vs. print
	* return
	   - return only has meaning inside a function
	   - has a value associated with return, given to function caller!
	* print
	   - has a value associated with print, outputted to the console!
   4.3 SCOPES
      4.3.1 variable scope
	* scope is mapping of names to objects 
		(Indicate different variable scope in function and main program!!!)
	   - formal parameter - x - gets bound to the value of actual parameter when function is called 
	   - def f( x ):  # x is formal parameter
		x = x + 1
		return x   
		# in function scope x = f( x )
	      x = 3  # actual parameter
	      z = f( x )
	      # in main program x = 3, z = f( x ) = 4	
	* Global scope (main program)                               Function scope (function f( ) )
	   # f( x ) --- some code                                           # x --- 4 --------> 
	   # x --- 3                   return x (value is 4) to z                     <-------- 
	   # z --- 4    <-------------------------------------------<-----
       4.3.2 function as arguments - f( arguments )
	* arguments can take on any type, even functions
	 	