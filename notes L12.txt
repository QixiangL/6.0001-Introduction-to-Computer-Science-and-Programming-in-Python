# Lecture 12: Searching and Sorting Algorithms
   12.0 definition
	* search algorithm - method for finding an item or group of items 
	* with specific properities within a <collectioin> of items
   12.1 <collection> could be implicit
	#search algorithm
      12.1.1 exhaustive enumeration (brute force search)
	* [charactersitic]
	   - or what we called "linear search" ---> loop
	   - list does not have to be sorted
	* [complexity]
	   - O(n) - where n is len(L)
      12.1.2 bisection search
	* [charactersitic]
	   - or what we called "binary search" ---> recursive
	   - list MUST be sorted to give correct answer
	* [complexity]
	   - O(logn)
      12.1.3 Newton - Raphson (approximation)

   12.2 <collection> could be implicit
	#sort algorithm
      12.2.1 MONKEY sort or BOGO sort
	* [characteristic]
	   - permutation sort, totally random sort
	* [code]
	   # def bogo_sort(L):
	            while not is_sorted(L):
	                  random.shuffle(L)
	* [complexity]
	   - best case: O(len(L))
	   - worst case: O(?) ---> unbounded
      12.2.2 BUBBLE sort
	* [characteristic]
	   -<1> compare consecutive pairs of elements
	   -<2> swap elements in pair such that SMALLER is first
	   -<3> start over again
	   -<4> stop when no more swaps
	* [code]
	   # def bubble_sort(L):
	            swap = False
	            while not swap:			#O(len(L))
	                  swap = True
	                  for j in range(1, len(L)):		#O(len(L))
	                        if L[j-1] > L[j]:
	                              swap = False
	                              temp = L[j]
	                              L[j] = L[j-1]
	                              L[j-1] = temp
	            return L
	* [complexity]
	   - inner for loop do the comparisions
	   - outer while loop do multiple passes until no more swaps
	   - O(n^2) - polynomial (quadratic) with n = len(L)
      12.2.3 SELECTION sort
	* [characteristic]
	   -<1> find the minimum element and swap it with element at index 0
	   -<2> do <1> for the remaining len(L) - 1 elements in the sublist
	   -<3> at i'th step, first i elements in list are sorted
	   * algorithm thought
	      #prefix of list L[0:i] & suffix of list L[i+1:len(L)]
	      #base case: prefix = empty & suffix = full
	      #induction step: move minimum element from suffix to end of prefix, suffix pointer += 1
	      #end case: prefix = full & suffix = empty
	* [code]
	   # def selection_sort(L):
	            suffix_pointer = 0
	            while suffix_pointer != len(L):		#outer loop len(L) times
	                  for i in range(suffix_pointer, len(L)):	#inner loop len(L) - suffix_pointer times
	                        if L[i] < L[suffix_pointer]:
	                              L[suffix_pointer], L[i] = L[i], L[suffix_pointer]
	                  suffix_pointer += 1
	* [complexity]
	   - O(n^2) - polynomial (quadratic) with n = len(L)
      12.2.4 MERGE sort
	* [characteristic] ---> divide-and-conquer
	   -<1> if list is of length 0 or 1, already sorted
	   -<2> if list has more than one element, split into two lists, and sort each
	   -<3> merge sorted sublists
		#look at first element of each, move smaller to end of the result
		#when one list empty, just copy rest of other list
	   * algorithm thought
	      #split list in half until have sublists of only 1 element
	      #sorted sublist-------------- recursion
	      #merge sorted <merge()> ---> key algorithm          
	      #sorted new sublist--------- recursion
	* [code]
	   ##<1>MERGING SUBLISTS STEP##
	   # def merge(left, right):
	            result = []
	            i, j = 0, 0
	            while i < len(left) and j < len(right):	#merge 2 lists
	                  if left[i] < right[j]:
	                        result.append(left[i])
	                        i += 1
	                  else:
	                        result.append(right[j])
	                        j += 1
	            while (i < len(left)):			#when right sublist is empty
	                  result.append(left[i])
	                  i += 1
	            while (j < len(right)):			#when left sublist is empty
	                  result.append(right[j])
	                  j += 1
	            return result
	   #complexity: 
		* go through left and right list, come up with long merged list
		* O(len(left) + len(right)) for copying list
		* complexity: linear in length of the lists O(len(L))
	##<2>MERGING SORT RECURSION##
	   # def merge_sort(L):
	            if len(L) < 2:				#base case
	                  return L[:]
	            else:
	                  middle = len(L) // 2
	                  left = merge_sort(L[:middle])		#divide
	                  right = merge_sort(L[middle:])
	                  return merge(left, right)		#conquer with the merge step
	   #complexity:
		* divide list successively into halves
		* depth-first: conquer smallest pieces down one branch
		* complexity: log!!! O(log(n))
	* [complexity]
	   - OVERALL!!! O(nlog(n)) where n is len(L)

   12.3 Sorting summary - n is len(L)
	* bogo sort: randomness, unbounded O()
	* bubble sort: O(n^2)
	* selection sort: O(n^2)
	* merge sort: O(nlog(n)) <--- winner!!!
